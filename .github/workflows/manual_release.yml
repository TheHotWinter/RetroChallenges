name: Manual Build and Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to build (branch or commit)'
        required: false
        default: 'main'
      tag:
        description: 'Release tag (optional)'
        required: false
        default: ''
      name:
        description: 'Release name (optional)'
        required: false
        default: ''
      draft:
        description: 'Create as draft?'
        required: false
        default: 'false'
      prerelease:
        description: 'Create as prerelease?'
        required: false
        default: 'false'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || '' }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || '' }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI || '' }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL || '' }}
      CHALLENGES_URL: ${{ secrets.CHALLENGES_URL || '' }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || 'main' }}

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build (electron-builder, no publish)
        run: npm run dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/**

  create_release:
    name: Create GitHub Release (manual)
    runs-on: ubuntu-latest
    needs: build
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
      - name: Compress artifacts into single archives
        run: |
          mkdir -p release_artifacts/archives
          for d in release_artifacts/dist-*; do
            if [ -d "$d" ]; then
              platform=$(basename "$d")
              archive="release_artifacts/archives/${platform}-${{ github.run_number }}.zip"
              echo "Creating $archive from $d"
              (cd "$d" && zip -r "../archives/$(basename "$archive")" .)
            fi
          done
        shell: bash

      - name: Create release and upload artifacts
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.tag || format('manual-{0}', github.run_id) }}
          name: ${{ github.event.inputs.name || format('Manual Release {0}', github.run_id) }}
          artifacts: release_artifacts/archives/*.zip
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
